server:
  port: 8082

spring:
  profiles:
    ## prod:生产环境，dev:开发环境
    active: dev
    ## kafka,rabbit 配置
    include: rabbit-amqp-dev
  application:
    name: geer2-iot-core
  #解决springboot2.1.x后@FeignClient相同名字报错问题
  main:
    allow-bean-definition-overriding: true
  servlet:
    multipart:
      maxFileSize: 30MB
      maxRequestSize: 30MB

  #时间戳统一转换
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  #influxDB 配置
  influx:
    url: http://112.74.124.96:8086 # 连接地址
    user: admin  # 账号
    password: Geer@!357  # 密码
    databaseName: geer2_iot # 数据库名称
    retentionPolicy: autogen # 保存策略
    maxDeque: 100 # 最大线程数
    bufferLimit: 50000  # 批次写入缓存数量大小
    action: 10000 # 单线程处理最大数量
    flushDuration: 500 # 批次写入间隔时间,最大毫秒数
    jitterDuration: 3 # 抖动时间, 毫秒
    keepAliveTime: 70 # 保活时间
  #数据库配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      primary:
        url: jdbc:mysql://112.74.124.96:3306/geer2_iot?useUnicode=true&characterEncoding=UTF-8&userSSL=false&serverTimezone=GMT%2B8&allowMultiQueries=true
        username: root
        password: Geer2@1357!
        driver-class-name: com.mysql.cj.jdbc.Driver
        #初始化大小
        initial-size: 5
        min-idle: 5
        max-active: 20
        #获取连接等待超时时间
        max-wait: 60000
        #间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        time-between-eviction-runs-millis: 60000
        #一个连接在池中最小生存的时间，单位是毫秒
        min-evictable-idle-time-millis: 300000
        validation-query: SELECT 1 FROM DUAL
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        #打开PSCache，并且指定每个连接上PSCache的大小
        pool-prepared-statements: false
        max-pool-prepared-statement-per-connection-size: 20
        #配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,slf4j
        connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      #Quartz任务调度数据源配置
      quartz:
        url: jdbc:mysql://127.0.0.1:3306/geer2_quartz?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=GMT%2B8
        username: root
        password: root
        driver-class-name: com.mysql.cj.jdbc.Driver
        #初始化大小
        initial-size: 5
        min-idle: 5
        max-active: 20
        #获取连接等待超时时间
        max-wait: 60000
        #间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        time-between-eviction-runs-millis: 60000
        #一个连接在池中最小生存的时间，单位是毫秒
        min-evictable-idle-time-millis: 300000
        validation-query: SELECT 1 FROM DUAL
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        #打开PSCache，并且指定每个连接上PSCache的大小
        pool-prepared-statements: false
        max-pool-prepared-statement-per-connection-size: 20
        #配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,slf4j
        connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        login-username: admin
        login-password: Geer21357
      web-stat-filter:
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        enabled: true
      filter:
        stat:
          log-slow-sql: true
          enabled: true
          merge-sql: true
          slow-sql-millis: 5000

#mybatis
mybatis:
  mapper-locations: classpath*:com/geer2/**/mapper/*.xml
  type-aliases-package: com.geer2.**.entity
#  configLocation: classpath:mybatis-config.xml
  configuration:
    map-underscore-to-camel-case: true

# 打印sql
logging:
  config: classpath:logback-spring-dev.xml
  level:
    com.geer2.**.mapper: DEBUG

#Spring Cloud 服务注册
eureka:
  instance:
    #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    #注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    #默认90s
    lease-expiration-duration-in-seconds: 30
    #服务刷新时间配置，每隔这个时间会主动心跳一次
    #默认30s
    lease-renewal-interval-in-seconds: 10
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

#Spring Cloud 服务消费者
feign:
  hystrix:
    enabled: true

#熔断器超时
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            #断路器的超时时间需要大于Ribbon的超时时间
            timeoutInMilliseconds: 60000

ribbon:
  #ribbon请求连接的超时时间- 限制X秒内必须请求到服务，并不限制服务处理的返回时间
  ConnectTimeout: 40000
  #请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout
  ReadTimeout: 50000
  #对所有操作请求都进行重试
  OkToRetryOnAllOperations: false
  #切换实例的重试次数
  MaxAutoRetriesNextServer: 0
  #对当前实例的重试次数
  MaxAutoRetries: 0
